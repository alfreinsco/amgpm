name: Deploy to VPS

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v3
        with:
          php-version: "8.3"
          extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, zip
          coverage: none

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --no-dev --optimize-autoloader

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install NPM dependencies
        run: npm ci

      - name: Build assets
        run: npm run build

      - name: Create deployment archive
        run: |
          tar -czf deployment.tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='.env' \
            --exclude='storage/logs/*' \
            --exclude='storage/framework/cache/*' \
            --exclude='storage/framework/sessions/*' \
            --exclude='storage/framework/views/*' \
            --exclude='bootstrap/cache/*' \
            .

      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            # Set variables
            APP_DIR="/var/www/amgpm"
            BACKUP_DIR="/var/www/amgpm_backup_$(date +%Y%m%d_%H%M%S)"

            # Create backup of current deployment
            if [ -d "$APP_DIR" ]; then
              echo "Creating backup..."
              sudo cp -r $APP_DIR $BACKUP_DIR
            fi

            # Create app directory if it doesn't exist
            sudo mkdir -p $APP_DIR

            # Set proper ownership
            sudo chown -R $USER:$USER $APP_DIR

            # Navigate to app directory
            cd $APP_DIR

            # Download and extract deployment archive
            echo "Downloading deployment archive..."
            # Note: You'll need to upload the archive to a temporary location first
            # This is a simplified version - in practice, you might use rsync or scp

      - name: Upload and extract files
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          source: "deployment.tar.gz"
          target: "/tmp/"

      - name: Extract and setup application
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: 22
          script: |
            # Set variables
            APP_DIR="/var/www/amgpm"

            # Extract files
            cd $APP_DIR
            sudo tar -xzf /tmp/deployment.tar.gz
            sudo rm /tmp/deployment.tar.gz

            # Set proper permissions
            sudo chown -R www-data:www-data $APP_DIR
            sudo chmod -R 755 $APP_DIR
            sudo chmod -R 775 $APP_DIR/storage
            sudo chmod -R 775 $APP_DIR/bootstrap/cache

            # Copy environment file (make sure .env exists on server)
            if [ ! -f "$APP_DIR/.env" ]; then
              echo "Warning: .env file not found. Please create it manually."
            fi

            # Install/update composer dependencies on server
            cd $APP_DIR
            composer install --no-dev --optimize-autoloader

            # Run Laravel commands
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan migrate --force

            # Create storage link if it doesn't exist
            if [ ! -L "$APP_DIR/public/storage" ]; then
              php artisan storage:link
            fi

            # Restart services (adjust according to your server setup)
            # sudo systemctl reload nginx
            # sudo systemctl restart php8.3-fpm

            echo "Deployment completed successfully!"
